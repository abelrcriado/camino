import { useEffect, useState } from "react";
import DashboardLayout from "@/components/dashboard/DashboardLayout";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Plus,
  Edit,
  Trash2,
  MapPin,
  Search,
  Building2,
  Store,
  Wrench,
  Users,
} from "lucide-react";

interface ServicePoint {
  id: string;
  name: string;
  code?: string;
  location_id: string;
  location_name?: string;
  city?: string;
  province?: string;
  address: string;
  postal_code: string;
  latitude?: number;
  longitude?: number;
  status: string;
  type: "CSP" | "CSS" | "CSH";

  // CSP fields
  partner_name?: string;
  partner_contact_name?: string;
  partner_contact_email?: string;
  partner_contact_phone?: string;
  partner_type?: string;

  // CSH fields
  workshop_name?: string;
  workshop_owner?: string;
  workshop_license?: string;

  // Services - Array de IDs de services (instancias) asignados a este punto
  service_ids?: string[];

  description?: string;
  created_at: string;
}

interface Location {
  id: string;
  city: string;
  province: string;
}

interface Service {
  id: string;
  code: string;
  name: string;
  service_type_name?: string;
  status: string;
}

export default function ServicePointsPage() {
  const [servicePoints, setServicePoints] = useState<ServicePoint[]>([]);
  const [locations, setLocations] = useState<Location[]>([]);
  const [services, setServices] = useState<Service[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState("");
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [editingPoint, setEditingPoint] = useState<ServicePoint | null>(null);
  const [formData, setFormData] = useState({
    name: "",
    location_id: "",
    address: "",
    postal_code: "",
    latitude: "",
    longitude: "",
    description: "",
    type: "CSS" as "CSP" | "CSS" | "CSH",
    status: "active",
    // CSP fields
    partner_name: "",
    partner_contact_name: "",
    partner_contact_email: "",
    partner_contact_phone: "",
    partner_type: "",
    // CSH fields
    workshop_name: "",
    workshop_owner: "",
    workshop_license: "",
    // Services - Array de service_ids seleccionados
    service_ids: [] as string[],
  });

  useEffect(() => {
    fetchServicePoints();
    fetchLocations();
    fetchServices();
  }, []);

  const fetchServicePoints = async () => {
    setLoading(true);
    try {
      const response = await fetch("/api/service-points");
      const data = await response.json();
      setServicePoints(data.servicePoints || []);
    } catch (error) {
      console.error("Error fetching service points:", error);
    } finally {
      setLoading(false);
    }
  };

  const fetchLocations = async () => {
    try {
      const response = await fetch("/api/locations");
      const data = await response.json();
      setLocations(data.locations || []);
    } catch (error) {
      console.error("Error fetching locations:", error);
    }
  };

  const fetchServices = async () => {
    try {
      const response = await fetch("/api/services?with_details=true");
      const data = await response.json();
      if (data.success) {
        setServices(data.data || []);
      }
    } catch (error) {
      console.error("Error fetching services:", error);
    }
  };

  const handleCreate = () => {
    setEditingPoint(null);
    setFormData({
      name: "",
      location_id: "",
      address: "",
      postal_code: "",
      latitude: "",
      longitude: "",
      description: "",
      type: "CSS",
      status: "active",
      partner_name: "",
      partner_contact_name: "",
      partner_contact_email: "",
      partner_contact_phone: "",
      partner_type: "",
      workshop_name: "",
      workshop_owner: "",
      workshop_license: "",
      service_ids: [],
    });
    setIsDialogOpen(true);
  };

  const handleEdit = (point: ServicePoint) => {
    setEditingPoint(point);
    setFormData({
      name: point.name,
      location_id: point.location_id,
      address: point.address,
      postal_code: point.postal_code,
      latitude: point.latitude?.toString() || "",
      longitude: point.longitude?.toString() || "",
      description: point.description || "",
      type: point.type,
      status: point.status,
      partner_name: point.partner_name || "",
      partner_contact_name: point.partner_contact_name || "",
      partner_contact_email: point.partner_contact_email || "",
      partner_contact_phone: point.partner_contact_phone || "",
      partner_type: point.partner_type || "",
      workshop_name: point.workshop_name || "",
      workshop_owner: point.workshop_owner || "",
      workshop_license: point.workshop_license || "",
      service_ids: point.service_ids || [],
    });
    setIsDialogOpen(true);
  };

  const handleDelete = async (id: string) => {
    if (
      !confirm("¿Estás seguro de que quieres eliminar este punto de servicio?")
    )
      return;

    try {
      const response = await fetch(`/api/service-points/${id}`, {
        method: "DELETE",
      });

      if (response.ok) {
        alert("Punto de servicio eliminado exitosamente");
        fetchServicePoints();
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error("Error deleting service point:", error);
      alert("Error al eliminar el punto de servicio");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    const url = editingPoint
      ? `/api/service-points/${editingPoint.id}`
      : "/api/service-points";
    const method = editingPoint ? "PUT" : "POST";

    try {
      const response = await fetch(url, {
        method,
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(formData),
      });

      if (response.ok) {
        alert(
          editingPoint
            ? "Punto de servicio actualizado exitosamente"
            : "Punto de servicio creado exitosamente"
        );
        setIsDialogOpen(false);
        fetchServicePoints();
      } else {
        const error = await response.json();
        alert(`Error: ${error.message}`);
      }
    } catch (error) {
      console.error("Error saving service point:", error);
      alert("Error al guardar el punto de servicio");
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case "active":
        return <Badge className="bg-green-500">Activo</Badge>;
      case "inactive":
        return <Badge variant="secondary">Inactivo</Badge>;
      case "maintenance":
        return <Badge className="bg-yellow-500">Mantenimiento</Badge>;
      default:
        return <Badge variant="outline">{status}</Badge>;
    }
  };

  const getTypeBadge = (type: string) => {
    switch (type) {
      case "CSP":
        return (
          <Badge
            variant="outline"
            className="bg-blue-500/10 text-blue-700 border-blue-300"
          >
            <Users className="h-3 w-3 mr-1" />
            CSP - Partner
          </Badge>
        );
      case "CSS":
        return (
          <Badge
            variant="outline"
            className="bg-green-500/10 text-green-700 border-green-300"
          >
            <Store className="h-3 w-3 mr-1" />
            CSS - Propio
          </Badge>
        );
      case "CSH":
        return (
          <Badge
            variant="outline"
            className="bg-purple-500/10 text-purple-700 border-purple-300"
          >
            <Wrench className="h-3 w-3 mr-1" />
            CSH - Taller Aliado
          </Badge>
        );
      default:
        return <Badge variant="outline">{type}</Badge>;
    }
  };

  const filteredPoints = servicePoints.filter(
    (point) =>
      point.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      point.location_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
      point.address.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <DashboardLayout>
      <div className="space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-medium">Puntos de Servicio</h3>
            <p className="text-sm text-muted-foreground">
              Gestiona talleres y ubicaciones de servicio
            </p>
          </div>
          <Button onClick={handleCreate}>
            <Plus className="mr-2 h-4 w-4" />
            Nuevo Punto
          </Button>
        </div>

        {/* Info Card */}
        <Card className="bg-primary/5 border-primary/20">
          <CardContent className="pt-6">
            <div className="flex items-start gap-3">
              <Building2 className="h-5 w-5 text-primary mt-0.5" />
              <div className="space-y-2">
                <h4 className="font-medium text-sm">
                  Tipos de Puntos de Servicio
                </h4>
                <div className="grid grid-cols-3 gap-4 mt-2">
                  <div className="space-y-1">
                    <Badge
                      variant="outline"
                      className="bg-blue-500/10 text-blue-700 border-blue-300"
                    >
                      <Users className="h-3 w-3 mr-1" />
                      CSP - Partner
                    </Badge>
                    <p className="text-xs text-muted-foreground">
                      Ubicado en albergue, hotel o gasolinera. Revenue
                      compartido con partner (5-50%).
                    </p>
                  </div>
                  <div className="space-y-1">
                    <Badge
                      variant="outline"
                      className="bg-green-500/10 text-green-700 border-green-300"
                    >
                      <Store className="h-3 w-3 mr-1" />
                      CSS - Propio
                    </Badge>
                    <p className="text-xs text-muted-foreground">
                      100% Camino. Máxima rentabilidad y control de marca.
                    </p>
                  </div>
                  <div className="space-y-1">
                    <Badge
                      variant="outline"
                      className="bg-purple-500/10 text-purple-700 border-purple-300"
                    >
                      <Wrench className="h-3 w-3 mr-1" />
                      CSH - Taller Aliado
                    </Badge>
                    <p className="text-xs text-muted-foreground">
                      Taller existente integrado. 17.5-20% comisión en servicios
                      profesionales.
                    </p>
                  </div>
                </div>
                {locations.length === 0 && (
                  <p className="text-sm text-amber-600 font-medium mt-3">
                    ⚠️ Primero debes crear ubicaciones en la sección
                    "Ubicaciones"
                  </p>
                )}
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Search */}
        <Card>
          <CardHeader>
            <div className="flex items-center gap-2">
              <Search className="h-4 w-4 text-muted-foreground" />
              <Input
                type="text"
                placeholder="Buscar por nombre, ciudad o dirección..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="max-w-sm"
              />
            </div>
          </CardHeader>
        </Card>

        {/* Table */}
        <Card>
          <CardHeader>
            <CardTitle>Puntos de Servicio ({filteredPoints.length})</CardTitle>
            <CardDescription>
              Lista de todos los puntos de servicio
            </CardDescription>
          </CardHeader>
          <CardContent>
            {loading ? (
              <div className="flex items-center justify-center py-8">
                <div className="text-muted-foreground">Cargando...</div>
              </div>
            ) : (
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>Nombre</TableHead>
                    <TableHead>Tipo</TableHead>
                    <TableHead>Partner/Taller</TableHead>
                    <TableHead>Dirección</TableHead>
                    <TableHead>Ubicación</TableHead>
                    <TableHead>Estado</TableHead>
                    <TableHead className="text-right">Acciones</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {filteredPoints.length > 0 ? (
                    filteredPoints.map((point) => (
                      <TableRow key={point.id}>
                        <TableCell className="font-medium">
                          {point.name}
                        </TableCell>
                        <TableCell>{getTypeBadge(point.type)}</TableCell>
                        <TableCell className="text-sm">
                          {point.type === "CSP" && point.partner_name && (
                            <span className="text-blue-600">
                              {point.partner_name}
                            </span>
                          )}
                          {point.type === "CSH" && point.workshop_name && (
                            <span className="text-purple-600">
                              {point.workshop_name}
                            </span>
                          )}
                          {point.type === "CSS" && (
                            <span className="text-green-600">Camino</span>
                          )}
                        </TableCell>
                        <TableCell className="text-sm">
                          {point.address}
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center gap-1">
                            <MapPin className="h-3 w-3" />
                            {point.location_name || point.city || "N/A"}
                          </div>
                        </TableCell>
                        <TableCell>{getStatusBadge(point.status)}</TableCell>
                        <TableCell className="text-right">
                          <div className="flex items-center justify-end gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleEdit(point)}
                            >
                              <Edit className="h-4 w-4" />
                            </Button>
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => handleDelete(point.id)}
                            >
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))
                  ) : (
                    <TableRow>
                      <TableCell
                        colSpan={7}
                        className="text-center py-8 text-muted-foreground"
                      >
                        No se encontraron puntos de servicio
                      </TableCell>
                    </TableRow>
                  )}
                </TableBody>
              </Table>
            )}
          </CardContent>
        </Card>

        {/* Create/Edit Dialog */}
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
            <DialogHeader>
              <DialogTitle>
                {editingPoint
                  ? "Editar Punto de Servicio"
                  : "Nuevo Punto de Servicio"}
              </DialogTitle>
              <DialogDescription>
                Complete los datos del punto de servicio
              </DialogDescription>
            </DialogHeader>
            <form onSubmit={handleSubmit}>
              <div className="grid gap-4 py-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="name">Nombre del Punto *</Label>
                    <Input
                      id="name"
                      value={formData.name}
                      onChange={(e) =>
                        setFormData({ ...formData, name: e.target.value })
                      }
                      placeholder="Taller Central Madrid"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="type">Tipo *</Label>
                    <select
                      id="type"
                      value={formData.type}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          type: e.target.value as "CSP" | "CSS" | "CSH",
                        })
                      }
                      className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm"
                      required
                    >
                      <option value="CSP">
                        CSP - Partner (albergue, hotel, gasolinera)
                      </option>
                      <option value="CSS">CSS - Propio (100% Camino)</option>
                      <option value="CSH">
                        CSH - Taller Aliado (comisión)
                      </option>
                    </select>
                  </div>
                </div>

                {/* CSP Fields */}
                {formData.type === "CSP" && (
                  <div className="border rounded-lg p-4 space-y-4 bg-blue-50/50">
                    <h4 className="font-medium text-sm text-blue-900">
                      Información del Partner
                    </h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="partner_name">
                          Nombre del Partner *
                        </Label>
                        <Input
                          id="partner_name"
                          value={formData.partner_name}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              partner_name: e.target.value,
                            })
                          }
                          placeholder="Albergue El Camino"
                          required={formData.type === "CSP"}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="partner_type">Tipo de Partner</Label>
                        <select
                          id="partner_type"
                          value={formData.partner_type}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              partner_type: e.target.value,
                            })
                          }
                          className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm"
                        >
                          <option value="">Seleccionar...</option>
                          <option value="albergue">Albergue</option>
                          <option value="hotel">Hotel</option>
                          <option value="gasolinera">Gasolinera</option>
                          <option value="otro">Otro</option>
                        </select>
                      </div>
                    </div>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="partner_contact_name">
                          Persona de Contacto
                        </Label>
                        <Input
                          id="partner_contact_name"
                          value={formData.partner_contact_name}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              partner_contact_name: e.target.value,
                            })
                          }
                          placeholder="Juan Pérez"
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="partner_contact_phone">Teléfono</Label>
                        <Input
                          id="partner_contact_phone"
                          value={formData.partner_contact_phone}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              partner_contact_phone: e.target.value,
                            })
                          }
                          placeholder="+34 600 123 456"
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="partner_contact_email">Email</Label>
                      <Input
                        id="partner_contact_email"
                        type="email"
                        value={formData.partner_contact_email}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            partner_contact_email: e.target.value,
                          })
                        }
                        placeholder="contacto@partner.com"
                      />
                    </div>
                  </div>
                )}

                {/* CSH Fields */}
                {formData.type === "CSH" && (
                  <div className="border rounded-lg p-4 space-y-4 bg-purple-50/50">
                    <h4 className="font-medium text-sm text-purple-900">
                      Información del Taller Aliado
                    </h4>
                    <div className="grid grid-cols-2 gap-4">
                      <div className="space-y-2">
                        <Label htmlFor="workshop_name">
                          Nombre del Taller *
                        </Label>
                        <Input
                          id="workshop_name"
                          value={formData.workshop_name}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              workshop_name: e.target.value,
                            })
                          }
                          placeholder="Taller BikesPro"
                          required={formData.type === "CSH"}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="workshop_owner">Propietario</Label>
                        <Input
                          id="workshop_owner"
                          value={formData.workshop_owner}
                          onChange={(e) =>
                            setFormData({
                              ...formData,
                              workshop_owner: e.target.value,
                            })
                          }
                          placeholder="María García"
                        />
                      </div>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="workshop_license">Licencia/CIF</Label>
                      <Input
                        id="workshop_license"
                        value={formData.workshop_license}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            workshop_license: e.target.value,
                          })
                        }
                        placeholder="B12345678"
                      />
                    </div>
                  </div>
                )}

                <div className="space-y-2">
                  <Label htmlFor="location_id">Ubicación (Ciudad) *</Label>
                  <select
                    id="location_id"
                    value={formData.location_id}
                    onChange={(e) =>
                      setFormData({ ...formData, location_id: e.target.value })
                    }
                    className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm"
                    required
                  >
                    <option value="">Seleccionar ubicación...</option>
                    {locations.map((loc) => (
                      <option key={loc.id} value={loc.id}>
                        {loc.city}, {loc.province}
                      </option>
                    ))}
                  </select>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Dirección *</Label>
                  <Input
                    id="address"
                    value={formData.address}
                    onChange={(e) =>
                      setFormData({ ...formData, address: e.target.value })
                    }
                    placeholder="Calle, número, piso..."
                    required
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="postal_code">Código Postal *</Label>
                    <Input
                      id="postal_code"
                      value={formData.postal_code}
                      onChange={(e) =>
                        setFormData({
                          ...formData,
                          postal_code: e.target.value,
                        })
                      }
                      placeholder="28001"
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="status">Estado *</Label>
                    <select
                      id="status"
                      value={formData.status}
                      onChange={(e) =>
                        setFormData({ ...formData, status: e.target.value })
                      }
                      className="flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm"
                      required
                    >
                      <option value="active">Activo</option>
                      <option value="inactive">Inactivo</option>
                      <option value="maintenance">Mantenimiento</option>
                    </select>
                  </div>
                </div>

                {/* Services */}
                <div className="border rounded-lg p-4 space-y-3">
                  <h4 className="font-medium text-sm">Servicios Instalados</h4>
                  <p className="text-xs text-gray-500">Selecciona los servicios disponibles en este punto</p>
                  <div className="max-h-48 overflow-y-auto space-y-2">
                    {services.length === 0 ? (
                      <p className="text-sm text-gray-500">No hay servicios creados. Crea servicios primero en la sección de Servicios.</p>
                    ) : (
                      services.map((service) => (
                        <label key={service.id} className="flex items-start gap-2 p-2 hover:bg-gray-50 rounded">
                          <input
                            type="checkbox"
                            checked={formData.service_ids.includes(service.id)}
                            onChange={(e) => {
                              const newIds = e.target.checked
                                ? [...formData.service_ids, service.id]
                                : formData.service_ids.filter((id: string) => id !== service.id);
                              setFormData({
                                ...formData,
                                service_ids: newIds,
                              });
                            }}
                            className="rounded border-gray-300 mt-1"
                          />
                          <div className="flex-1">
                            <div className="text-sm font-medium">{service.name}</div>
                            <div className="text-xs text-gray-500">
                              Tipo: {service.service_type_name || 'N/A'} • Estado: {service.status}
                            </div>
                          </div>
                        </label>
                      ))
                    )}
                  </div>
                </div>

                {/* Coordenadas GPS */}
                <div className="border rounded-lg p-4 space-y-3">
                  <h4 className="font-medium text-sm">Coordenadas GPS (Opcional)</h4>
                  <div className="grid grid-cols-2 gap-4">
                    <div className="space-y-2">
                      <Label htmlFor="latitude">Latitud</Label>
                      <Input
                        id="latitude"
                        type="text"
                        placeholder="40.4168"
                        value={formData.latitude}
                        onChange={(e) =>
                          setFormData({ ...formData, latitude: e.target.value })
                        }
                      />
                      <p className="text-xs text-gray-500">Rango: -90 a 90</p>
                    </div>
                    <div className="space-y-2">
                      <Label htmlFor="longitude">Longitud</Label>
                      <Input
                        id="longitude"
                        type="text"
                        placeholder="-3.7038"
                        value={formData.longitude}
                        onChange={(e) =>
                          setFormData({ ...formData, longitude: e.target.value })
                        }
                      />
                      <p className="text-xs text-gray-500">Rango: -180 a 180</p>
                    </div>
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="description">Descripción</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) =>
                      setFormData({ ...formData, description: e.target.value })
                    }
                    placeholder="Descripción del punto de servicio"
                    rows={2}
                  />
                </div>
              </div>
              <DialogFooter>
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => setIsDialogOpen(false)}
                >
                  Cancelar
                </Button>
                <Button type="submit">
                  {editingPoint ? "Actualizar" : "Crear"}
                </Button>
              </DialogFooter>
            </form>
          </DialogContent>
        </Dialog>
      </div>
    </DashboardLayout>
  );
}
